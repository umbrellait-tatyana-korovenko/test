{
	"info": {
		"_postman_id": "87ef2919-e34d-48bc-bae5-c6fb0c021c10",
		"name": "Notification API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Notification",
			"item": [
				{
					"name": "Add event",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "triggerUserId",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "receiverUserId",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "objectId",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "actionType",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "timestamp",
									"value": "<int>",
									"type": "text"
								},
								{
									"key": "suppData",
									"value": "[]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{notiBaseUrl}}/event.json?appId={{notiAppId}}&transactionType=ADD",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"event.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								},
								{
									"key": "transactionType",
									"value": "ADD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete event",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "triggerUserId",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "receiverUserId",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "objectId",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "actionType",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "timestamp",
									"value": "<int>",
									"type": "text"
								},
								{
									"key": "suppData",
									"value": "[]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{notiBaseUrl}}/event.json?appId={{notiAppId}}&transactionType=DELETE",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"event.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								},
								{
									"key": "transactionType",
									"value": "DELETE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get notification lists",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notiBaseUrl}}/noti.json?appId={{notiAppId}}&userId={{userAccountId}}",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"noti.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								},
								{
									"key": "userId",
									"value": "{{userAccountId}}"
								},
								{
									"key": "refKey",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "itemCount",
									"value": "<int>",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete notification by userId",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{notiBaseUrl}}/noti.json?appId={{notiAppId}}&idType=USER&id=<string>",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"noti.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								},
								{
									"key": "idType",
									"value": "USER"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete notification by objectId",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{notiBaseUrl}}/noti.json?appId={{notiAppId}}&idType=OBJECT&id=<string>",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"noti.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								},
								{
									"key": "idType",
									"value": "OBJECT"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ef0cde8b-cf2d-444e-a241-69ff34d1a374",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c52d98d3-339c-4b3b-96e9-d85a1c5f52a8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ReadState",
			"item": [
				{
					"name": " Get notification list unread count",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notiBaseUrl}}/read-state.json?{{notiReadStateParams}}",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"read-state.json"
							],
							"query": [
								{
									"key": "{{notiReadStateParams}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark notification list as read",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{notiBaseUrl}}/read-state.json?{{notiReadStateParams}}",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"read-state.json"
							],
							"query": [
								{
									"key": "{{notiReadStateParams}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update individual notification items read states",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "actionType",
									"value": "<string>",
									"type": "text",
									"disabled": true
								},
								{
									"key": "receiverUserId",
									"value": "<string>",
									"type": "text",
									"disabled": true
								},
								{
									"key": "objectId",
									"value": "<string>",
									"type": "text",
									"disabled": true
								},
								{
									"key": "itemKey",
									"value": "<string>",
									"type": "text"
								},
								{
									"key": "state",
									"value": "<int>",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{notiBaseUrl}}/item-read-state.json?appId={{notiAppId}}",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"item-read-state.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PushNoti",
			"item": [
				{
					"name": "Update push tokens",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"payload\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{notiBaseUrl}}/token.json?appId={{notiAppId}}&action=update",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"token.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								},
								{
									"key": "action",
									"value": "update"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove push tokens",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"payload\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{notiBaseUrl}}/token.json?appId={{notiAppId}}&action=remove",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"token.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								},
								{
									"key": "action",
									"value": "remove"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Async send push notifications",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"items\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{notiBaseUrl}}/push.json?appId={{notiAppId}}",
							"host": [
								"{{notiBaseUrl}}"
							],
							"path": [
								"push.json"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{notiAppId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a8f8af4c-6541-4f78-b6aa-72a545e0545f",
				"type": "text/javascript",
				"exec": [
					"const secret = pm.environment.get('notiAppSecret');",
					"",
					"const params = {};",
					"",
					"const {url, body = {}} = pm.request;",
					"",
					"const requestParams = [...url.query.all(), ...(body.urlencoded ? body.urlencoded.all() : [])];",
					"requestParams.forEach(info => {",
					"    const {key, value, disabled} = info;",
					"    if (disabled || value === null) return;",
					"    params[key] = pm.environment.replaceIn(value) || value;",
					"})",
					"",
					"if (body.mode === 'raw' && _.get(body, 'options.raw.language') === 'json') {",
					"    const jsonData = JSON.parse(body.raw);",
					"    for (let [key, value] of Object.entries(jsonData)) {",
					"      params[key] = value;",
					"    }",
					"}",
					"",
					"const rawurlencode = (str) => {",
					"  if (typeof str === 'object') return '';",
					"  return encodeURIComponent(`${str}`).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/\\*/g, '%2A')",
					"}",
					"",
					"let str = '';",
					"[...Object.entries(params)].sort().forEach(v => {",
					"    str += `${rawurlencode(v[0])}=${rawurlencode(v[1])}`;",
					"})",
					"",
					"if (str.length) {",
					"    const signature = CryptoJS.SHA1(`${str}.${secret}`).toString();",
					"    pm.request.url.query.add({key: 'signature', value: signature})",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9c8c3bef-7c81-43bc-8d0b-2f1661fa588e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}