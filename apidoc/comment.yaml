openapi: '3.0.0'

info:
  title: Comment API
  version: 1.0.0
  contact:
    email: calvin@9gag.com
  description: |
    Production App ID: `a_dd8f2b7d304a10edaf6f29517ea0ca4100a43d1b`

    Staging App ID: `a_8ffed3d619270a8e605654f8023db7958063d458`

    Use CDN domain for endpoints prefixed with `/cacheable/` (ex. `/cacheable/comment-list.json`)

    Never include `auth` header in CDN requests

    Client should call `GET /cacheable/app.json` to get latest app config for the session

    For non-logged in users, use `GET /cacheable/comment-list.json` to load comments/replies

    For logged in user, you should first retrieve the token from 9gag user-token API `commentAuth.authHash`

    Client should call `POST /user.json` to get user info and recent activities and cache it for the session
    - Client should locally update `likeMapping`/`commentedPostUrls`/`reportedPostUrls` for the session accordingly
    - Use `likeMapping` to highlight comment upvote/downvote state
    - If a user has not commented/reported on the post, use `GET /cacheable/comment-list.json`
      - Determine by checking if current post url exist in `commentedPostUrls` and `reportedPostUrls` dictionary
    - Otherwise, call `POST /comment-list.json` with `auth` header

servers:
- url: https://comment.9gag.com
  description: Production API
- url: https://comment-cdn.9gag.com
  description: Production CDN
- url: https://comment.9jokes.com
  description: Staging API
- url: https://comment-cdn.9jokes.com
  description: Staging CDN

tags:
  - name: Comment
    description: ''

x-globalCommonAuthHeaders: &COMMON_AUTH_HEADERS
  - $ref: "#/components/parameters/headerUserAgent"
  - $ref: "#/components/parameters/auth"

x-globalCommonRequestHeaders: &COMMON_REQUEST_HEADERS
  - $ref: "#/components/parameters/headerUserAgent"

# Parameters of post list API
# Use of * referencing multiple aliases wouldn't work (in single or nested parameters)
x-globalCommentListParameters: &COMMENT_LIST_PARAMETERS
  - $ref: "#/components/parameters/headerUserAgent"
  - $ref: '#/components/parameters/appId'
  - $ref: '#/components/parameters/url'
  - name: order
    in: query
    description: |
      The ordering of comments
        - score - Hot
        - ts - Fresh
    schema:
      type: string
      enum:
        - score
        - ts
      default: score
  - name: count
    in: query
    description: The number of comments to return
    schema:
      type: integer
      format: int32
      default: 10
  - name: ref
    in: query
    description: 'Use 1st level last comment orderKey to get 1st level paged results'
    schema:
      type: string
      default: ''
  - name: refCommentId
    in: query
    description: 'Use 2nd level (reply) last commentId to get 2nd level paged results'
    schema:
      type: string
      default: ''
  - name: direction
    in: query
    description: |
      The order direction of comments
        - desc - Descending
        - asc - Ascending
    schema:
      type: string
      enum:
        - desc
        - asc
      default: desc
  - name: commentId
    in: query
    description: |
      Specify comment to highlight (shift to top), useful for notification/permalink
      If commentId is 2nd level (reply), it will both push the parent comment and reply to top
    schema:
      type: string
      default: ''

# Parameters of v2 comment-list API
x-globalV2CommentListParameters: &V2_COMMENT_LIST_PARAMETERS
  - $ref: "#/components/parameters/headerUserAgent"
  - $ref: '#/components/parameters/appId'
  - $ref: '#/components/parameters/url'
  - name: type
    in: query
    description: |
      The ordering type of comments
        - old - Comments in chronological order
        - anchor - Chronological order with preceding and succeeding comments. Must provide a comment ID.
        - new - Fresh comments first
        - hot - Hot ranking by highest score first (not applicable to sub-level comments)
    schema:
      type: string
      enum:
        - old
        - anchor
        - new
        - hot
      default: old
  - name: count
    in: query
    description: The number of comments to return. Minimum is 1 and maximum is 100.
    schema:
      type: integer
      format: int32
      default: 10
  - name: commentId
    in: query
    description: |
      The comment which acts as the reference point of the request. If provided,
        - Under Old/New ordering, the comment will be on top of the results and followed by comments in the specified time order (old ordering by default)
        - Under Hot ordering, the comment will be shifted to top and followed by the comments in hot order
        - Get sub-level comments (replies) by providing parent `commentId` together with child's level in `level` param
    schema:
      type: string
      default: ''
  - name: level
    in: query
    description: |
      The level of comments to return. Only required when getting sub-level comments of a given parent `commentId`.
      If not given, level will always follow that of the given `commentId` or level 1 (default).
    schema:
      type: integer
      format: int32
      default: 1
  - name: prev
    in: query
    description: Cursor-based pagination which specifies to get comments before a specific comment on the given ordering. Useful in load 'previous' comments after restoring position.
    schema:
      type: string
      default: ''
  - name: next
    in: query
    description: Cursor-based pagination which specifies to get comments after a specific comment on the given ordering. Useful in normal load more comments.
    schema:
      type: string
      default: ''

paths:
  /v2/cacheable/comment-list.json:
    parameters: *V2_COMMENT_LIST_PARAMETERS
    get:
      tags:
        - Comment
      summary: Get Cacheable Comment List
      description: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV2CommentList'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v2/comment-list.json:
    parameters: *V2_COMMENT_LIST_PARAMETERS
    post:
      tags:
        - Comment
      summary: Get Comment List
      parameters:
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV2CommentList'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/cacheable/comment-list.json:
    parameters: *COMMENT_LIST_PARAMETERS
    get:
      tags:
        - Comment
      summary: Get Cacheable Comment List
      description: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCommentList'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/comment-list.json:
    parameters: *COMMENT_LIST_PARAMETERS
    post:
      tags:
        - Comment
      summary: Get Comment List
      parameters:
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCommentList'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/cacheable/app.json:
    parameters: *COMMON_REQUEST_HEADERS
    get:
      tags:
        - Comment
      summary: Get Cacheable App Info
      description: ''
      parameters:
        - $ref: '#/components/parameters/appId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApp'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/comment.json:
    parameters: *COMMON_AUTH_HEADERS
    post:
      tags:
        - Comment
      summary: Create/Reply Comment
      description: ''
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                appId:
                  $ref: '#/components/parameters/appId'
                text:
                  type: string
                  description: the content of the comment, it can be a memeful url
                  example: 'Hello'
                parent:
                  type: string
                  description: parent comment Id. Specify first level commentId to reply comment
                notifyId:
                  type: string
                  description: The second level commentId user reply to
                userMedia:
                  type: string
                  description: sourceMeta json from UploadMedia API
                hash:
                  type: string
                  description: hash from UploadMedia API, required if userMedia is provided
                follow:
                  type: integer
                  description: 1 to opt-in auto-follow thread for new reply
                replyThreadOnly:
                  type: integer
                  description: 1 to mark the comment as a reply to the thread instead of any specific comment
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComment'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/comment.json/{commentId}:
    parameters: *COMMON_AUTH_HEADERS
    delete:
      tags:
        - Comment
      summary: Delete Comment
      description: ''
      parameters:
        - $ref: '#/components/parameters/appId'
        - $ref: '#/components/parameters/url'
        - in: path
          name: commentId
          required: true
          description: comment identifier
          schema:
            type: string
            example: c_13892083614383
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeleteComment'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/media.json:
    parameters: *COMMON_AUTH_HEADERS
    post:
      tags:
        - Comment
      summary: Upload media (Support jpg/png/gif)
      description: ''
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                blob:
                  description: file content
                  type: string
                  format: binary
                appId:
                  $ref: '#/components/parameters/appId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMedia'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/like.json:
    parameters: *COMMON_AUTH_HEADERS
    post:
      tags:
        - Comment
      summary: Like / Dislike Comment
      description: ''
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                appId:
                  $ref: '#/components/parameters/appId'
                commentId:
                  $ref: '#/components/parameters/commentId'
                value:
                  type: integer
                  description: 1 for like / -1 for dislike / 0 for cancel like
                  example: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLike'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/report.json:
    parameters: *COMMON_AUTH_HEADERS
    post:
      tags:
        - Comment
      summary: Report Comment
      description: ''
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                appId:
                  $ref: '#/components/parameters/appId'
                commentId:
                  $ref: '#/components/parameters/commentId'
                url:
                  $ref: '#/components/parameters/url'
                userReportData:
                  type: string
                  description: JSON containing reportType code
                  example: '{"reportType": 6}'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReport'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/user.json:
    parameters: *COMMON_REQUEST_HEADERS
    post:
      tags:
        - Comment
      summary: Get User info and recent activities
      description: ''
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                appId:
                  $ref: '#/components/parameters/appId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

  /v1/cacheable/comments.json:
    parameters: *COMMON_REQUEST_HEADERS
    get:
      tags:
        - Comment
      summary: Get multiple comments
      description: ''
      parameters:
        - $ref: '#/components/parameters/appId'
        - name: commentIds
          in: query
          description: List of Comment IDs (commas separated)
          example: c_13892083614383,c_13830156075026
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComments'
        '400':
          description: 'Error if invalid appId/url is provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          example: 'OK'
          default: 'OK'
        error:
          type: string
          example: ''
          default: ''
        payload:
          type: object
      required:
        - status
        - error
        - payload
    ApiErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          status:
            type: string
            default: 'ERROR'
    ApiCommentList:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              url:
                type: string
                description: 'Post URL'
                example: 'http://9gag.com/gag/awQAOxR'
              total:
                type: integer
                description: 'Total comment count'
              hasNext:
                type: boolean
                description: 'Whether there are more 1st level comments'
              opUserId:
                type: string
                description: 'Comment OP user ID'
              comments:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    ApiV2CommentList:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              url:
                type: string
                description: 'Post URL'
                example: 'http://9gag.com/gag/awQAOxR'
              total:
                type: integer
                description: 'Total comment count'
              opUserId:
                type: string
                description: 'Comment OP user ID'
              comments:
                type: array
                items:
                  $ref: '#/components/schemas/CommentV2'
              prev:
                type: string
                description: 'Cursor for getting previous page of comments. If null, this is the first page of comments'
              next:
                type: string
                description: 'Cursor for getting next page of comments. Null means last page of comments with no further data'
              level:
                type: integer
                description: 'Level of the returned comments'
              parent:
                $ref: '#/components/schemas/CommentV2'
                description: 'Parent of the returned comments. Null if returned comments are of level 1'

    ApiComments:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              comments:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    ApiApp:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              maxDisplayLevel:
                type: integer
                example: 2
              maxMessageLength:
                type: integer
                example: 1000
              allowImageUploadFeature:
                type: integer
                example: 1
                description: Disable image upload feature if 0
              allowPostUrlComment:
                type: integer
                example: 1
                description: Disable reaction image feature if 0
              reactionImageSite:
                type: string
                example: memeful.com
              opLabelFeature:
                type: integer
                example: 1
                description: Disable OP Label feature if 0
              anonymousAvatarUrl:
                type: string
                example: https://accounts.9gag.com/media/default-avatar/1_0_100_v0.jpg
                description: Default avatar url
              mentionUrlPattern:
                type: string
                example: ''
                description: 'Only for Web implementation'
              refDomain:
                type: string
                example: 9gag.com
                description: 'Only for Web implementation'
              liveCommentFeature:
                type: integer
                example: 0
                description: 'Deprecated, always 0'
              allowAnonymousComment:
                type: integer
                example: 0
                description: 'Deprecated, always 0'
              allowAnonymousVote:
                type: integer
                example: 0
                description: 'Deprecated, always 0'
              mobileUserNameClickable:
                type: integer
                example: 1
                description: 'Deprecated, always 1'

    ApiMedia:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            imageMetaByType:
              $ref: '#/components/schemas/CommentMedia'
            sourceMeta:
              type: object
              properties:
                width:
                  type: integer
                  example: 480
                height:
                  type: integer
                  example: 480
                class:
                  type: string
                  enum:
                    - STATIC
                    - ANIMATED
                  example: ANIMATED
                type:
                  type: string
                  example: gif
                accountKey:
                  type: string
                  example: aZxqxv3
                key:
                  type: string
                  example: a7QdPVMo
                size:
                  type: integer
                  example: 1865843
            hash:
              type: string
              example: 1f61c123032dc19ee0f79bf1199ef9ac

    ApiComment:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              postId:
                type: string
                example: p_8a1b9085e1ebf12b01c2b079dfeaeb92fe76ad0d
              opUserId:
                type: string
                description: 'Comment OP user ID'
                example: u_13838125378480
              quota:
                $ref: '#/components/schemas/UserQuota'
              total:
                type: integer
                example: 1
              comment:
                $ref: '#/components/schemas/Comment'

    ApiDeleteComment:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              quota:
                $ref: '#/components/schemas/UserQuota'

    ApiLike:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              okay:
                type: boolean
                example: true
    ApiReport:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              okay:
                type: boolean
                example: true
    ApiUser:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          payload:
            type: object
            properties:
              commentedPostUrls:
                example: {"http://9jokes.com/gag/aPvw0pq": 1}
                additionalProperties:
                  type: string
              reportedPostUrls:
                example: {"http://9jokes.com/gag/aLKRVEM": 1}
                additionalProperties:
                  type: string
              likeMapping:
                example: {"c_146554179061464149": 1, "c_146554179554484701": -1}
                additionalProperties:
                  type: string
              user:
                $ref: '#/components/schemas/UserInfo'
              quota:
                $ref: '#/components/schemas/UserQuota'

    Comment:
      type: object
      properties:
        commentId:
          type: string
        status:
          type: integer
          description: '0 = normal'
        parent:
          type: string
          description: 'Parent Comment ID'
        type:
          type: string
          description: |
            - text: display comment.text
            - userMedia: display comment.mediaText then comment.media
          enum:
            - text
            - media
            - userMedia
        embedMediaMeta:
          type: object
          description: Deprecated
        media:
          type: array
          items:
            type: object
            properties:
              imageMetaByType:
                $ref: '#/components/schemas/CommentMedia'
              sourceMeta:
                description: 'Not used when display'
                type: object
              hash:
                description: 'Not used when display'
                type: string
        text:
          type: string
          description: 'Message when type=text'
        mediaText:
          type: string
          description: 'Message when type=userMedia'
        likeCount:
          type: integer
        timestamp:
          type: integer
        mentionMapping:
          type: object
          description: |
            Dictionary of @mention => accountId mapping.
            Parse the comment text with the mapping to render clickable @mentions
          additionalProperties:
            type: string
        permalink:
          type: string
          description: 'Link for sharing the specific comment'
        level:
          type: integer
          description: |
            - 1: 1st level comment
            - 2: 2nd level comment (reply)
          enum:
            - 1
            - 2
        children:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        childrenTotal:
          type: integer
        hasNext:
          type: boolean
          description: 'Whether there are more 2nd level comments (children)'
        orderKey:
          description: 'Pass the last comment orderKey to ref param to load more'
          type: string
        userId:
          type: string
        user:
          $ref: '#/components/schemas/CommentUser'
        dislikeCount:
          type: integer
          description: 'Deprecated. always 0'
        coinCount:
          type: integer
          description: 'Deprecated'
        isLike:
          type: object
          description: 'Deprecated. always 0'
          properties:
            value:
              type: integer
              default: 0
        section:
          description: 'Not in used'
          type: string
        isCollapsed:
          description: 'Not in used'
          type: integer
        isAnonymous:
          description: 'Deprecated. always 0'
          type: integer
        isUrl:
          description: 'Not in used'
          type: integer
        richtext:
          description: 'Not in used'
          type: string
        suppData:
          description: 'Not in used'
          type: object
        isPinned:
          type: integer
          description: 'Whether the comment is pinned'
        isVoteMasked:
          type: integer
          description: 'Whether the comment score is hidden'
        threadId:
          type: string
          description: 'Thread ID, empty for old comment and does not support thread'

    CommentV2:
      type: object
      properties:
        childrenTotal:
          type: integer
        childrenUrl:
          type: string
          description: 'Query to load the children of this comment'
        commentId:
          type: string
        dislikeCount:
          type: integer
        isPinned:
          type: integer
          description: 'Whether the comment is pinned'
        isVoteMasked:
          type: integer
          description: 'Whether the comment score is hidden'
        level:
          type: integer
          description: 'Level of the comment'
        likeCount:
          type: integer
        media:
          type: array
          items:
            type: object
            properties:
              imageMetaByType:
                $ref: '#/components/schemas/CommentMedia'
              sourceMeta:
                description: 'Not used when display'
                type: object
              hash:
                description: 'Not used when display'
                type: string
        mediaText:
          type: string
          description: 'Message when type=userMedia'
        mentionMapping:
          type: object
          description: |
            Dictionary of @mention => accountId mapping.
            Parse the comment text with the mapping to render clickable @mentions
          additionalProperties:
            type: string
        parent:
          type: string
          description: 'Parent Comment ID'
        threadId:
          type: string
          description: 'Thread ID, empty for old comment and does not support thread'
        permalink:
          type: string
          description: 'Link for sharing the specific comment'
        suppData:
          description: 'Not in used'
          type: object
        text:
          type: string
          description: 'Message when type=text'
        timestamp:
          type: integer
        type:
          type: string
          description: |
            - text: display comment.text
            - userMedia: display comment.mediaText then comment.media
          enum:
            - text
            - media
            - userMedia
        user:
          $ref: '#/components/schemas/CommentUser'

    UserInfo:
      type: object
      properties:
        userId:
          type: string
          example: u_140971780140619863
        displayName:
          type: string
          example: calvin
        emojiStatus:
          type: string
          example: 🇩🇪
        country:
          type: string
          example: hk
        avatarUrl:
          type: string
          example: http://stg-accounts-cdn.9gaging.com/media/default-avatar/1_89_100_v0.jpg
        profileUrl:
          type: string
          example: http://9jokes.com/u/calvin
        isActivePro:
          type: boolean
          example: true
        isActiveProPlus:
          type: boolean
          example: false
        role:
          type: string
          example: user
        moderate:
          type: boolean
          example: false
        preferences:
          type: object
          properties:
            hideProBadge:
              type: integer
              default: 0
            hideActiveTs:
              type: integer
              default: 0
            accentColor:
              type: string
              default: ''
            backgroundColor:
              type: string
              default: ''

    UserQuota:
      type: object
      properties:
        count:
          type: integer
          example: 1
        wait:
          type: integer
          example: 60

    CommentUser:
      type: object
      properties:
        userId:
          type: string
        accountId:
          type: string
        hashedAccountId:
          type: string
        displayName:
          type: string
        emojiStatus:
          type: string
        country:
          type: string
        avatarUrl:
          type: string
        profileUrl:
          type: string
        profileUrls:
          type: object
          description: 'Deprecated. The first value in dictionary is user profileUrl'
          additionalProperties:
            type: string
        timestamp:
          type: integer
        isActivePro:
          type: boolean
          example: true
        isActiveProPlus:
          type: boolean
          example: false
        permissions:
          type: object
          description: '9GAG PRO user if dictionary of "9GAG_Pro" == 1'
          additionalProperties:
            type: integer
            default: 1
        preferences:
          type: object
          properties:
            hideProBadge:
              type: integer
              default: 0
            hideActiveTs:
              type: integer
              default: 0
            accentColor:
              type: string
              default: ''
            backgroundColor:
              type: string
              default: ''

    CommentMedia:
      type: object
      properties:
        type:
          type: string
          enum:
            - STATIC
            - ANIMATED
        image:
          $ref: '#/components/schemas/CommentImageMeta'
        imageXLarge:
          $ref: '#/components/schemas/CommentMediaMeta'
        animated:
          $ref: '#/components/schemas/CommentMediaMeta'
        video:
          $ref: '#/components/schemas/CommentMediaMeta'
      required:
        - type
        - image

    CommentMediaMeta:
      type: object
      properties:
        width:
          type: integer
        height:
          type: integer
        url:
          type: string

    CommentImageMeta:
      allOf:
        - $ref: '#/components/schemas/CommentMediaMeta'
        - type: object
          properties:
            webpUrl:
              type: string
              description: Field exists only when webp is available

  parameters:

    appId:
      name: appId
      in: query
      description: The application ID
      required: true
      example: a_8ffed3d619270a8e605654f8023db7958063d458
      schema:
        type: string
        default: 'a_dd8f2b7d304a10edaf6f29517ea0ca4100a43d1b'
        enum:
          - 'a_dd8f2b7d304a10edaf6f29517ea0ca4100a43d1b'
          - 'a_8ffed3d619270a8e605654f8023db7958063d458'

    url:
      name: url
      in: query
      description: The URI of the comment
      example: https://9jokes.com/gag/aEwzr6p
      required: true
      schema:
        type: string

    auth:
      name: auth
      in: header
      description: commentAuth.authHash from 9GAG API
      example: sso1234567890
      required: true
      schema:
        type: string

    commentId:
      name: commentId
      in: query
      description: comment identifier
      example: c_13830156075026
      required: true
      schema:
        type: string

    headerUserAgent:
      name: User-Agent
      in: header
      description: 'User-Agent with app version and device information'
      required: true
      schema:
        type: string
        default: 9GAG/602110 (Samsung Galaxy S7 Edge;Android 7.0.1)
